#!/bin/sh
#\
exec tclsh "$0" ${1+"$@"}
#@(#) OMXTool Ver. 1.5 - graphical utility tool for OpenMX.
#@(#) Copyright (C), 2015-2017, Naoya Yamaguchi.
#@(#) This software includes the work that is distributed
#@(#) in version 3 of the GPL (GPLv3).
#@(#)
#@(#) Log:
#@(#)    2015/07/10 Ver. alpha-1 Written by Naoya Yamaguchi.
#@(#)    2015/07/13 Ver. alpha-2 Written by Naoya Yamaguchi.
#@(#)    2015/07/15 Ver. alpha-3 Written by Naoya Yamaguchi.
#@(#)    2015/07/16 Ver. alpha-4 Written by Naoya Yamaguchi.
#@(#)    2015/08/24 Ver. alpha-5 Written by Naoya Yamaguchi.
#@(#)    2015/11/12 Ver. beta-1 Written by Naoya Yamaguchi.
#@(#)    2016/03/17 Ver. alpha-6 Written by Naoya Yamaguchi.
#@(#)    2016/06/11 Ver. 1.0 Released by Naoya Yamaguchi.
#@(#)    2016/08/19 Ver. 1.1 Released by Naoya Yamaguchi.
#@(#)    2016/09/23 Ver. 1.2 Released by Naoya Yamaguchi.
#@(#)    2016/10/01 Ver. 1.2.1 Modified by Naoya Yamaguchi.
#@(#)    2016/10/04 Ver. 1.2.2 Modified by Naoya Yamaguchi.
#@(#)    2016/10/18 Ver. 1.2.3 Modified by Naoya Yamaguchi.
#@(#)    2016/12/09 Ver. 1.2.4 Modified by Naoya Yamaguchi.
#@(#)    2016/12/17 Ver. 1.3 Released by Naoya Yamaguchi.
#@(#)    2016/12/18 Ver. 1.3.1 Modified by Naoya Yamaguchi.
#@(#)    2017/01/02 Ver. 1.3.2 Modified by Naoya Yamaguchi.
#@(#)    2017/01/15 Ver. 1.4 Released by Naoya Yamaguchi.
#@(#)                 (renaming 'openmx.tcl' 'OMXTool.tcl')
#@(#)    2017/02/11 Ver. 1.4.1 Modified by Naoya Yamaguchi.
#@(#)    2017/02/13 Ver. 1.4.2 Modified by Naoya Yamaguchi.
#@(#)                 (renaming 'OMXTool.tcl' 'omxtool')
#@(#)    2017/03/04 Ver. 1.4.3 Modified by Naoya Yamaguchi.
#@(#)    2017/03/09 Ver. 1.5 Released by Naoya Yamaguchi.
#@(#)    2017/03/09 Ver. 1.5.1 Modified by Naoya Yamaguchi.
#@(#)    2017/03/13 Ver. 1.5.2 Modified by Naoya Yamaguchi.
#@(#)    2017/03/13 Ver. 1.5.3 Modified by Naoya Yamaguchi.
#@(#)
#@(#) Usage:
#@(#)    ./omxtool (&)
#@(#)
#@(#) Description:
#@(#)    This script provides graphical utilities for OpenMX.
#@(#)

package require Tk
proc status {} {
  set stat ""
  if {![catch {exec which qstat}]} {
    if {![catch {set stat [exec qstat -T | grep $::env(USER)]}]} {
    } elseif {![catch {exec which point}]} {
      set stat [exec point]
    } else {
      set stat [exec qstat]
    }
  } elseif {![catch {exec pjstat}]} {
    set stat [exec pjstat]
  }
  return $stat
}
proc status1 {} {
  set stat ""
  catch {set stat [exec ps -fu $::env(USER) | grep "reload\\.exp"]}
  return $stat
}
proc bandgap {} {
  global dir path
  set fp [open $path.BANDDAT1]
  while {[gets $fp data] >= 0} {
    if {[lindex $data 0] == 0.000000} {break}
  }
  while {[gets $fp data] >= 0} {
    set ene [lindex $data 1]
    if {$ene > 0} {
      if {![info exists cmin] || $ene < $cmin} {
	set cmin $ene
      }
    } elseif {![info exists vmax] || $ene > $vmax} {
      set vmax $ene
    }
  }
  return [expr $cmin - $vmax]
}
proc band_close {win} {
  global gp
  destroy .t$win
  close [lindex $gp $win]
}
#
# The function 'bandgnu' is based on 'bandgnu13.c', a postprocessing tool of OpenMX written by H. Kino.
#
proc bandgnu {argc argv} {
  array set Unit0 {0 27.21138505 1 1.0}
  array set Unitname0 {0 eV 1 Hartree}
  set iunit 0
  set Unit $Unit0($iunit)
  set Unitname $Unitname0($iunit)
  set fp [open [lindex $argv 0] r]
  gets $fp data
  scan $data "%d %d %lf" maxneig mspin ChemP
  gets $fp data
  scan $data "%lf %lf %lf %lf %lf %lf %lf %lf %lf" rtv(1)(1) rtv(1)(2) rtv(1)(3) rtv(2)(1) rtv(2)(2) rtv(2)(3) rtv(3)(1) rtv(3)(2) rtv(3)(3)
  gets $fp data
  scan $data "%d" nkpath
  set m_perpath 0
  for {set i 1} {$i<=$nkpath} {incr i} {
    gets $fp data
    scan $data "%d %lf %lf %lf %lf %lf %lf %s %s" n_perpath($i) kpath11($i)(1)(1) kpath($i)(1)(2) kpath($i)(1)(3) kpath($i)(2)(1) kpath($i)(2)(2) kpath($i)(2)(3) kname($i)(1) kname($i)(2)
    if {$kname($i\)\(1) eq "G"} {
      set kname($i)(1) "{/Symbol G}"
    }
    if {$kname($i\)\(2) eq "G"} {
      set kname($i)(2) "{/Symbol G}"
    }
  }
  set meig $maxneig
  if {$argc==3} {
    set Emin [lindex $argv 1]
    set Emax [lindex $argv 2]
    if {$Emin>$Emax} {
      set tmp $Emin
      set Emin $Emax
      set Emax $tmp
    }
    set ymin [expr {$Emin/$Unit+$ChemP}]
    set ymax [expr {$Emax/$Unit+$ChemP}]
    for {set spin 0} {$spin<=$mspin} {incr spin} {
      set lmin($spin) $maxneig
      set lmax($spin) 1
    }
  } else {
    set ymin 100000.0
    set ymax -100000.0
  }
  for {set ik 1} {$ik<=$nkpath} {incr ik} {
    set ikm1 [expr {$ik-1}]
    for {set i_perpath 1} {$i_perpath<=$n_perpath($ik)} {incr i_perpath} {
      set i_perpathm1 [expr {$i_perpath-1}]
      for {set spin 0} {$spin<=$mspin} {incr spin} {
	gets $fp data
	scan $data "%d %lf %lf %lf" n1 vk(1) vk(2) vk(3)
	for {set i 1} {$i<=3} {incr i} {
	  set v($i) 0.0
	  for {set j 1} {$j<=3} {incr j} {
	    set v($i) [expr {$v($i)+$vk($j)*$rtv($j\)\($i)}]
	  }
	}
	for {set i 1} {$i<=3} {incr i} {
	  set vk($i) $v($i)
	}
	if {!$spin} {
	  if {$i_perpath==1} {
	    if {$ik==1} {
	      set tmp 0.0
	      lappend klinel 0.0
	    } else {
	      lappend klinel $tmp
	    }
	  } else {
	    set vkmovk1 [expr {$vk(1)-$ovk($spin\)\(1)}]
	    set vkmovk2 [expr {$vk(2)-$ovk($spin\)\(2)}]
	    set vkmovk3 [expr {$vk(3)-$ovk($spin\)\(3)}]
	    set tmp [expr {$tmp+sqrt($vkmovk1*$vkmovk1+$vkmovk2*$vkmovk2+$vkmovk3*$vkmovk3)}]
	    lappend klinel $tmp
	  }
	}
	for {set i 1} {$i<=3} {incr i} {
	  set ovk($spin)($i) $vk($i)
	}
	if {$meig>$n1} {
	  set meig $n1
	}
	gets $fp data
	if {$argc==3} {
	  for {set lminm1 [expr {$lmin($spin)-1}]} {$lminm1>=0} {incr lminm1 -1} {
	    if {[lindex $data $lminm1]<$ymin} {
	      if {$lmin($spin)>$lminm1+2} {
		set lmin($spin) [expr {$lminm1+2}]
	      }
	      break
	    }
	  }
	  for {set lmaxm1 [expr {$lmax($spin)-1}]} {$lmaxm1<$meig} {incr lmaxm1} {
	    if {[lindex $data $lmaxm1]>$ymax} {
	      if {$lmax($spin)<$lmaxm1} {
		set lmax($spin) $lmaxm1
	      }
	      break
	    }
	  }
	} else {
	  if {$ymin>[lindex $data 0]} {
	    set ymin [lindex $data 0]
	  }
	  if {$ymax<[lindex $data end]} {
	    set ymax [lindex $data end]
	  }
	}
	set l 1
	foreach EI $data {
	  lappend EIGENl($spin)($l) $EI
	  incr l
	}
      }
    }
  }
  if {$argc!=3} {
    for {set spin 0} {$spin<=$mspin} {incr spin} {
      set lmin($spin) 1
      set lmax($spin) $meig
    }
  }
  set ymax1 [expr {($ymax-$ymin)*1.1+$ymin}]
  set ymin1 [expr {-($ymax-$ymin)*1.1+$ymax}]
  close $fp
  for {set spin 0} {$spin<=$mspin} {incr spin} {
    set fnamedat1($spin) [file rootname [lindex $argv 0]].BANDDAT[expr {$spin+1}]
    set fp [open $fnamedat1($spin) w]
    set index $n_perpath(1)
    for {set ik 2} {$ik<=$nkpath} {incr ik} {
      set k 0
      set kl [lindex $klinel $index]
      for {set i 0} {$i<=10} {incr i} {
	set tmp [expr {(($ymin1-$ChemP)+($ymax1-$ymin1)*$i/10.0)*$Unit}]
	if {$tmp>0 && $k==0} {
	  puts $fp [format "%lf %lf" $kl 0.0]
	  set k 1
	}
	puts $fp [format "%lf %lf" $kl $tmp]
      }
      set index [expr {$index+$n_perpath($ik)}]
      puts $fp \n
    }
    for {set l $lmin($spin)} {$l<=$lmax($spin)} {incr l} {
      set i_perpath 1
      set ik 1
      foreach kl $klinel EI $EIGENl($spin\)\($l) {
	puts $fp [format "%lf %15.12f" $kl [expr {($EI-$ChemP)*$Unit}]]
	incr i_perpath
	if {$i_perpath>$n_perpath($ik)} {
	  set i_perpath 1
	  incr ik
	  puts $fp \n
	}
      }
    }
    close $fp
  }
  set fname [file rootname [lindex $argv 0]].GNUBAND
  set fp [open $fname w]
  puts $fp "set style data lines"
  puts $fp "set nokey"
  puts $fp "set zeroaxis"
  puts $fp "set ytics 1"
  puts $fp "set mytics 5"
  puts $fp [format "set xra \[%lf:%lf\]" [lindex $klinel 0] [lindex $klinel end]]
  if {$argc==3} {
    puts $fp [format "set yra \[%lf:%lf\]" $Emin $Emax]
  } else {
    puts $fp [format "set yra \[%lf:%lf\]" [expr {($ymin1-$ChemP)*$Unit}] [expr {($ymax1-$ChemP)*$Unit}]]
  }
  puts $fp "set ylabel \"$Unitname\""
  puts -nonewline $fp "set xtics ("
  for {set ik 1} {$ik<=$nkpath} {incr ik} {
    if {$ik==1} {
      set ticsname $kname($ik\)\(1)
      set index 0
    } else {
      if {$kname($ik\)\(1) eq $kname([expr {$ik-1}]\)\(2)} {
	set ticsname $kname($ik\)\(1)
      } else {
	set ticsname $kname([expr {$ik-1}]\)\(2),$kname(ik\)\(1)
      }
    }
    puts -nonewline $fp [format "\"%s\" %lf, " $ticsname [lindex $klinel $index]]
    set index [expr {$index+$n_perpath($ik)}]
  }
  puts $fp [format "\"%s\" %lf)" $kname($nkpath\)\(2) [lindex $klinel end]]
  puts -nonewline $fp "plot \"$fnamedat1(0)\""
  if {$mspin} {
    puts $fp ", \"$fnamedat1(1)\""
  } else {
    puts $fp ""
  }
  puts $fp "pause -1"
  close $fp
  if {$mspin} {
    return "$nkpath $mspin $lmin(0) $lmax(0) $lmin(1) $lmax(1)"
  } else {
    return "$nkpath $mspin $lmin(0) $lmax(0)"
  }
}
proc band {} {
  global rootPath dir path nwin gp yraMin yraMax fontSize bandgnuPath bandgnuMode bandgnuAE ylabel bandgnuColor bandgnuPreview bandgnuExport bandgnuEnhanced ratio ytics BANDDAT1Color BANDDAT2Color branchColor BANDDAT1Type BANDDAT2Type branchType gnuplotVersion BANDDAT1Width BANDDAT2Width branchWidth LCMode lmin lmax branchMode
  if {$bandgnuMode eq "C"} {
    if {$bandgnuPath eq ""} {
      set tmp [tk_getOpenFile -initialdir $dir -filetypes {{{source file} {bandgnu*.c}}} -title "Select a source file of 'bandgnu'"]
      if {$tmp ne ""} {
	set bandgnuPath $tmp
      } else {
	return
      }
    }
  }
  set path [tk_getOpenFile -initialdir $dir -filetypes {{{Band Data} {.Band}}}]
  if {$path ne ""} {
    set dir [file dirname $path]
  } else {
    return
  }
  cd $rootPath
  if {$bandgnuMode eq "C"} {
    if {![file exists $bandgnuPath]} {
      puts stderr "Error: Check the path of 'bandgnu*.c'."
      puts [pwd]
      exit 1
    }
    set bandgnu [file rootname [file tail $bandgnuPath]]
    if {![file exists $bandgnu]} {
      exec gcc $bandgnuPath -lm -o $bandgnu
    }
    cd $dir
    set path [file tail $path]
    catch {exec $rootPath/$bandgnu $path}
  } else {
    cd $dir
    set path [file tail $path]
    set bandgnuList [bandgnu 3 "$path $yraMin $yraMax"]
    set nkpath [lindex $bandgnuList 0]
    set mspin [lindex $bandgnuList 1]
    set lmin(1) [lindex $bandgnuList 2]
    set lmax(1) [lindex $bandgnuList 3]
    if {$mspin} {
      set lmin(2) [lindex $bandgnuList 4]
      set lmax(2) [lindex $bandgnuList 5]
    }
  }
  set path [file rootname $path]
  set gpath $path.GNUBAND
  if {$bandgnuMode eq "Tcl" && $bandgnuPreview} {
    eval [exec gnuplot << "
    \ \  se term tkcanvas
    \ \  se ou '.$path.tcl'
    \ \  load '$gpath'
    \ \  se size ratio $ratio
    \ \  se yr \[$yraMin:$yraMax\]
    \ \  se yl '$ylabel'
    \ \  se yti $ytics
    \ \  rep
    "]
  }
  set p [open |gnuplot w]
  fconfigure $p -buffering none
  puts $p "  set mouse"
  if {$bandgnuMode eq "Tcl"} {
    puts $p "  set term unknown"
  }
  if {$bandgnuEnhanced} {
    set terminal "x11 enhanced"
  } else {
    set terminal x11
  }
  set bandgnuExport "postscript eps"
  set fp [open $gpath r]
  while {[gets $fp txt] >= 0} {
    if {[string equal -length 5 $txt pause]} {
      puts $p "  se size ratio $ratio"
      puts $p "  se yr \[$yraMin:$yraMax\]"
      puts $p "  se yl '$ylabel'"
      puts $p "  se yti $ytics"
      puts $p "  se term $terminal"
      if {$bandgnuAE} {
	puts $p "  se term $bandgnuExport enhanced color $fontSize"
	puts $p "  se ou '$path.eps'"
	puts $p "  rep"
	puts $p "  se term $terminal"
	puts $p "  se output"
      }
      if {$bandgnuMode eq "C"} {
	puts $p "  rep"
      } elseif {$bandgnuPreview} {
	source .$path.tcl
	file delete .$path.tcl
      }
      toplevel .t$nwin
      wm title .t$nwin $dir/$gpath
      if {$bandgnuMode eq "C"} {
	set gap [bandgap]
      } else {
	set gap "not supported"
      }
      label .t$nwin.lgap -text "Bandgap = $gap \[eV\]"
      frame .t$nwin.fCommon
      button .t$nwin.fCommon.bexit -text Close -command "band_close $nwin"
      button .t$nwin.fCommon.bExport -text Export -command "
      set tmp \[tk_getSaveFile -initialdir $dir -filetypes {{{Encapsulated PostScript (EPS)} {*.eps}} {{Portable Document Format (PDF)} {*.pdf}} {{Portable Network Graphics (PNG)} {*.png}} {{Joint Photographic Experts Group (JPEG)} {*.jpeg}} {{Scalable Vector Graphics (SVG)} {*.svg}} {{Enhanced Metafile Format (EMF)} {*.emf}} {{Graphics Interchange Format (GIF)} {*.gif}}} -parent .t$nwin\]
      if {\$tmp eq \"\"} {return}
      set filetype \[file extension \$tmp]
      if {\$filetype eq \".eps\"} {
      set bandgnuExport {postscript eps}
      } elseif {\$filetype eq \".pdf\"} {
      set bandgnuExport pdf
      } elseif {\$filetype eq \".png\"} {
      set bandgnuExport png
      } elseif {\$filetype eq \".jpeg\"} {
      set bandgnuExport jpeg
      } elseif {\$filetype eq \".svg\"} {
      set bandgnuExport svg
      } elseif {\$filetype eq \".emf\"} {
      set bandgnuExport emf
      } elseif {\$filetype eq \".gif\"} {
      set bandgnuExport gif
      }
      eval \[exec gnuplot << \"
      \ \ se term \$bandgnuExport
      \"\]
      puts $p \"  se term \$bandgnuExport enhanced color \$fontSize\"
      puts $p \"  se ou '\$tmp'\"
      puts $p \"  rep\"
      puts $p \"  se term $terminal\"
      puts $p \"  se ou\"
      tk_messageBox -type ok -message \"\$tmp is made.\" -title \"Export\"
      "
      if {$bandgnuMode eq "Tcl" && $bandgnuPreview} {
	canvas .t$nwin.c -bg $bandgnuColor
	pack .t$nwin.c
	gnuplot .t$nwin.c
      }
      if {$bandgnuMode eq "C"} {
	pack .t$nwin.lgap
      } else {
	frame .t$nwin.fGnuplot
	button .t$nwin.fGnuplot.bGnuplot -text "Gnuplot (Reset)" -default active -command "
	puts $p \"  se size ratio \$ratio\"
	puts $p \"  se yl '\$ylabel'\"
	puts $p \"  se yti \$ytics\"
	set lineStyle \"lt \$BANDDAT1Type\"
	lappend lineStyle \"lw \$BANDDAT1Width\"
	if {$gnuplotVersion>=4.2} {
	if {\$LCMode==2} {
	lappend lineStyle \"lc rgb '\$BANDDAT1RGBColor'\"
	} elseif {\$LCMode==1} {
	lappend lineStyle \"lc '\$BANDDAT1Color'\"
	}
	}
	puts $p \"  plot '$path.BANDDAT1' \[join \$lineStyle\]\"
	if {$mspin} {
	set lineStyle \"lt \$BANDDAT2Type\"
	lappend lineStyle \"lw \$BANDDAT2Width\"
	if {$gnuplotVersion>=4.2} {
	if {\$LCMode==2} {
	lappend lineStyle \"lc rgb '\$BANDDAT2RGBColor'\"
	} elseif {\$LCMode==1} {
	lappend lineStyle \"lc '\$BANDDAT2Color'\"
	}
	}
	puts $p \"  rep '$path.BANDDAT2' \[join \$lineStyle\]\"
	}
	"
	frame .t$nwin.fBranch
	radiobutton .t$nwin.fBranch.rbBANDDAT1 -text BANDDAT1 -value 1 -variable branchMode($nwin) -command "
	.t$nwin.lfBranch.sb configure -from $lmin(1) -to $lmax(1) -increment 1
	.t$nwin.lfBranch.l configure -text \"($lmin(1)-$lmax(1))\"
	"
	.t$nwin.fBranch.rbBANDDAT1 select
	if {$mspin} {
	  radiobutton .t$nwin.fBranch.rbBANDDAT2 -text BANDDAT2 -value 2 -variable branchMode($nwin) -command "
	  .t$nwin.lfBranch.sb configure -from $lmin(2) -to $lmax(2) -increment 1
	  .t$nwin.lfBranch.l configure -text \"($lmin(2)-$lmax(2))\"
	  "
	}
	pack .t$nwin.fBranch.rbBANDDAT1 -side left
	if {$mspin} {
	  pack .t$nwin.fBranch.rbBANDDAT2 -side left
	}
	labelframe .t$nwin.lfBranch -labelwidget .t$nwin.fBranch
	spinbox .t$nwin.lfBranch.sb -from $lmin(1) -to $lmax(1) -increment 1
	button .t$nwin.lfBranch.b -text Branch -command "
	if {\[.t$nwin.lfBranch.sb get\]>\$lmax(\$branchMode($nwin))} {
	.t$nwin.lfBranch.sb set \$lmax(\$branchMode($nwin))
	} elseif {\[.t$nwin.lfBranch.sb get\]<\$lmin(\$branchMode($nwin))} {
	.t$nwin.lfBranch.sb set \$lmin(\$branchMode($nwin))
	}
	puts $p \"  se size ratio \$ratio\"
	puts $p \"  se yl '\$ylabel'\"
	puts $p \"  se yti \$ytics\"
	set lineStyle \"lt \$branchType\"
	lappend lineStyle \"lw \$branchWidth\"
	if {$gnuplotVersion>=4.2} {
	if {\$LCMode==2} {
	lappend lineStyle \"lc rgb '\$branchRGBColor'\"
	} elseif {\$LCMode==1} {
	lappend lineStyle \"lc '\$branchColor'\"
	}
	}
	puts $p \"  rep '$path.BANDDAT\$branchMode($nwin)' in \[expr {(\[.t$nwin.lfBranch.sb get\]-\$lmin(\$branchMode($nwin))+1)*$nkpath-1}\]:\[expr {(\[.t$nwin.lfBranch.sb get\]-\$lmin(\$branchMode($nwin))+2)*$nkpath-2}\] \[join \$lineStyle\]\"
	"
	label .t$nwin.lfBranch.l -text "($lmin(1)-$lmax(1))"
	if {$bandgnuPreview} {
	  checkbutton .t$nwin.fGnuplot.cbBackground -text Background -variable BGColor -offvalue #ffffff -onvalue $bandgnuColor -command ".t$nwin.c configure -bg \$BGColor"
	  .t$nwin.fGnuplot.cbBackground select
	}
	button .t$nwin.fCommon.bOption -text Option -command openOptionGP
	pack .t$nwin.fGnuplot
	if {$bandgnuPreview} {
	  pack .t$nwin.fGnuplot.bGnuplot .t$nwin.fGnuplot.cbBackground -side left
	} else {
	  pack .t$nwin.fGnuplot.bGnuplot
	}
	pack .t$nwin.lfBranch
	pack .t$nwin.lfBranch.sb .t$nwin.lfBranch.l .t$nwin.lfBranch.b -side left
      }
      pack .t$nwin.fCommon
      pack .t$nwin.fCommon.bExport .t$nwin.fCommon.bOption .t$nwin.fCommon.bexit -side left
      incr nwin
    } else {
      puts $p $txt
    }
  }
  close $fp
  lappend gp $p
}
proc bin2bin {fp typep num format_src fp_new} {
  global val
  upvar $typep type
  if {$format_src eq "l_format"} {
    set format b_format
  } else {
    set format l_format
  }
  set data [read $fp [expr {$type(size) * $num}]]
  binary scan $data $type($format_src)$num val
  if {$typep ne "char"} {
    set data [binary format $type($format)$num $val]
  } else {
    set data [binary format "A$num" $val]
  }
  puts -nonewline $fp_new $data
}
proc b2bMain {fname format} {
  global val
  if {[info patchlevel]<8.5} {
    puts stderr "Error: 'bin2bin' requires 'tclsh8.5' or later."
    exit 1
  }
  if {$format eq "b"} {
    set extension _l
  } else {
    set extension _b
  }
  set fp [open $fname r]
  set fp_new [open $fname$extension w]
  fconfigure $fp -translation binary
  fconfigure $fp_new -translation binary
  append format _format
  array set int {size 4 l_format i b_format I}
  array set double {size 8 l_format q b_format Q}
  array set char {size 1 l_format a b_format a}
  bin2bin $fp int 6 $format $fp_new
  set atomnum [lindex $val 0]
  set SpinP_switch [lindex $val 1]
  if {$SpinP_switch>3 || $SpinP_switch<0} {
    return 1
  }
  set TCpyCell [lindex $val 5]
  bin2bin $fp double [expr {($TCpyCell + 1) * 4}] $format $fp_new ;#atv
  bin2bin $fp int [expr {($TCpyCell + 1) * 4}] $format $fp_new ;#atv_ijk
  bin2bin $fp int $atomnum $format $fp_new ;#Total_NumOrbs
  set Total_NumOrbs $val
  bin2bin $fp int $atomnum $format $fp_new ;#FNAN
  set FNAN $val
  set natn ""
  foreach fnan $FNAN {
    bin2bin $fp int [expr {$fnan + 1}] $format $fp_new ;#natn
    lappend natn $val
  }
  foreach fnan $FNAN {
    bin2bin $fp int [expr {$fnan + 1}] $format $fp_new ;#ncn
  }
  bin2bin $fp double 12 $format $fp_new ;#tv
  bin2bin $fp double 12 $format $fp_new ;#rtv
  bin2bin $fp double [expr {$atomnum * 4}] $format $fp_new ;#Gxyz
  for {set spin 0} {$spin <= $SpinP_switch} {incr spin} {
    for {set ct_AN 0} {$ct_AN < $atomnum} {incr ct_AN} {
      set TNO1 [lindex $Total_NumOrbs $ct_AN]
      set fnan [lindex $FNAN $ct_AN]
      for {set h_AN 0} {$h_AN <= $fnan} {incr h_AN} {
	set Gh_AN [lindex $natn $ct_AN $h_AN]
	set TNO2 [lindex $Total_NumOrbs [expr {$Gh_AN - 1}]]
	for {set i 0} {$i < $TNO1} {incr i} {
	  bin2bin $fp double $TNO2 $format $fp_new ;#Hk
	}
      }
    }
  }
  if {$SpinP_switch == 3} {
    for {set spin 0} {$spin < 3} {incr spin} {
      for {set ct_AN 0} {$ct_AN < $atomnum} {incr ct_AN} {
	set TNO1 [lindex $Total_NumOrbs $ct_AN]
	set fnan [lindex $FNAN $ct_AN]
	for {set h_AN 0} {$h_AN <= $fnan} {incr h_AN} {
	  set Gh_AN [lindex $natn $ct_AN $h_AN]
	  set TNO2 [lindex $Total_NumOrbs [expr {$Gh_AN - 1}]]
	  for {set i 0} {$i < $TNO1} {incr i} {
	    bin2bin $fp double $TNO2 $format $fp_new ;#iHk
	  }
	}
      }
    }
  }
  for {set ct_AN 0} {$ct_AN < $atomnum} {incr ct_AN} {
    set TNO1 [lindex $Total_NumOrbs $ct_AN]
    set fnan [lindex $FNAN $ct_AN]
    for {set h_AN 0} {$h_AN <= $fnan} {incr h_AN} {
      set Gh_AN [lindex $natn $ct_AN $h_AN]
      set TNO2 [lindex $Total_NumOrbs [expr {$Gh_AN - 1}]]
      for {set i 0} {$i < $TNO1} {incr i} {
	bin2bin $fp double $TNO2 $format $fp_new ;#OLP
      }
    }
  }
  for {set ct_AN 0} {$ct_AN < $atomnum} {incr ct_AN} {
    set TNO1 [lindex $Total_NumOrbs $ct_AN]
    set fnan [lindex $FNAN $ct_AN]
    for {set h_AN 0} {$h_AN <= $fnan} {incr h_AN} {
      set Gh_AN [lindex $natn $ct_AN $h_AN]
      set TNO2 [lindex $Total_NumOrbs [expr {$Gh_AN - 1}]]
      for {set i 0} {$i < $TNO1} {incr i} {
	bin2bin $fp double $TNO2 $format $fp_new ;#OLPpox
      }
    }
  }
  for {set ct_AN 0} {$ct_AN < $atomnum} {incr ct_AN} {
    set TNO1 [lindex $Total_NumOrbs $ct_AN]
    set fnan [lindex $FNAN $ct_AN]
    for {set h_AN 0} {$h_AN <= $fnan} {incr h_AN} {
      set Gh_AN [lindex $natn $ct_AN $h_AN]
      set TNO2 [lindex $Total_NumOrbs [expr {$Gh_AN - 1}]]
      for {set i 0} {$i < $TNO1} {incr i} {
	bin2bin $fp double $TNO2 $format $fp_new ;#OLPpoy
      }
    }
  }
  for {set ct_AN 0} {$ct_AN < $atomnum} {incr ct_AN} {
    set TNO1 [lindex $Total_NumOrbs $ct_AN]
    set fnan [lindex $FNAN $ct_AN]
    for {set h_AN 0} {$h_AN <= $fnan} {incr h_AN} {
      set Gh_AN [lindex $natn $ct_AN $h_AN]
      set TNO2 [lindex $Total_NumOrbs [expr {$Gh_AN - 1}]]
      for {set i 0} {$i < $TNO1} {incr i} {
	bin2bin $fp double $TNO2 $format $fp_new ;#OLPpoz
      }
    }
  }
  for {set spin 0} {$spin <= $SpinP_switch} {incr spin} {
    for {set ct_AN 0} {$ct_AN < $atomnum} {incr ct_AN} {
      set TNO1 [lindex $Total_NumOrbs $ct_AN]
      set fnan [lindex $FNAN $ct_AN]
      for {set h_AN 0} {$h_AN <= $fnan} {incr h_AN} {
	set Gh_AN [lindex $natn $ct_AN $h_AN]
	set TNO2 [lindex $Total_NumOrbs [expr {$Gh_AN - 1}]]
	for {set i 0} {$i < $TNO1} {incr i} {
	  bin2bin $fp double $TNO2 $format $fp_new ;#DM
	}
      }
    }
  }
  bin2bin $fp int 1 $format $fp_new ;#Solver
  bin2bin $fp double 10 $format $fp_new
  bin2bin $fp int 1 $format $fp_new
  set num_lines $val
  set MAX_LINE_SIZE 256
  for {set i 0} {$i < $num_lines} {incr i} {
    bin2bin $fp char $MAX_LINE_SIZE $format $fp_new ;#strg
  }
}
proc b2b {} {
  global dir path
  set path [tk_getOpenFile -initialdir $dir -filetypes {{{SCFOUT file} {.scfout*}}}]
  if {$path ne ""} {
    set dir [file dirname $path]
  } else {
    return
  }
  if {[b2bMain $path l]==1} {
    file delete ${path}_b
    b2bMain $path b
    tk_messageBox -type ok -message "The byte order (endianness) converts from big-endian format to litle-endian format.\n\n${path}_l is made." -title "'Big' to 'Little'"
  } else {
    tk_messageBox -type ok -message "The byte order (endianness) converts from little-endian format to big-endian format.\n\n${path}_b is made." -title "'Little' to 'Big'"
  }
}
proc saveSetting {} {
  global rootPath yraMax yraMin fontSize bandgnuPath bandgnuMode WD bandgnuAE ylabel bandgnuColor bandgnuPreview bandgnuExport bandgnuEnhanced ratio ytics BANDDAT1Color BANDDAT2Color branchColor BANDDAT1Type BANDDAT2Type branchType BANDDAT1Width BANDDAT2Width branchWidth LCMode BANDDAT1RGBColor BANDDAT2RGBColor branchRGBColor
  set fprc [open $rootPath/.omxtoolrc w]
  puts $fprc "set yraMax {$yraMax}"
  puts $fprc "set yraMin {$yraMin}"
  puts $fprc "set fontSize {$fontSize}"
  puts $fprc "set bandgnuPath {$bandgnuPath}"
  puts $fprc "set bandgnuMode {$bandgnuMode}"
  puts $fprc "set WD {$WD}"
  puts $fprc "set bandgnuAE {$bandgnuAE}"
  puts $fprc "set ylabel {$ylabel}"
  puts $fprc "set bandgnuColor {$bandgnuColor}"
  puts $fprc "set bandgnuPreview {$bandgnuPreview}"
  puts $fprc "set bandgnuExport {$bandgnuExport}"
  puts $fprc "set bandgnuEnhanced {$bandgnuEnhanced}"
  puts $fprc "set ratio {$ratio}"
  puts $fprc "set ytics {$ytics}"
  puts $fprc "set BANDDAT1Color {$BANDDAT1Color}"
  puts $fprc "set BANDDAT2Color {$BANDDAT2Color}"
  puts $fprc "set branchColor {$branchColor}"
  puts $fprc "set BANDDAT1Type {$BANDDAT1Type}"
  puts $fprc "set BANDDAT2Type {$BANDDAT2Type}"
  puts $fprc "set branchType {$branchType}"
  puts $fprc "set BANDDAT1Width {$BANDDAT1Width}"
  puts $fprc "set BANDDAT2Width {$BANDDAT2Width}"
  puts $fprc "set branchWidth {$branchWidth}"
  puts $fprc "set LCMode {$LCMode}"
  puts $fprc "set BANDDAT1RGBColor {$BANDDAT1RGBColor}"
  puts $fprc "set BANDDAT2RGBColor {$BANDDAT2RGBColor}"
  puts $fprc "set branchRGBColor {$branchRGBColor}"
  close $fprc
}
proc openOption {} {
  global gnuplotVersion LCMode
  toplevel .tOption
  wm title .tOption Option
  grab set .tOption
  frame .tOption.fYra
  label .tOption.fYra.l -text Yrange
  label .tOption.fYra.ll -text \[
  label .tOption.fYra.lc -text :
  label .tOption.fYra.lr -text \]
  entry .tOption.fYra.eMax -textvariable yraMax
  entry .tOption.fYra.eMin -textvariable yraMin
  frame .tOption.fFontSize
  label .tOption.fFontSize.l -text "Font Size"
  entry .tOption.fFontSize.e -textvariable fontSize
  frame .tOption.fYlabel
  label .tOption.fYlabel.l -text Ylabel
  entry .tOption.fYlabel.e -textvariable ylabel
  button .tOption.bCommon -text Common -command {
    toplevel .tOption.tCommon
    wm title .tOption.tCommon Common
    grab set .tOption.tCommon
    button .tOption.tCommon.bClose -text Close -command {
      destroy .tOption.tCommon
      grab set .tOption
    }
    frame .tOption.tCommon.fPath
    label .tOption.tCommon.fPath.l -text "Working Directory"
    entry .tOption.tCommon.fPath.e -textvariable WD -width 100
    button .tOption.tCommon.fPath.b -text Select -command {
      set tmp [tk_chooseDirectory -initialdir $WD -title "Select a working directory" -parent .tOption.tCommon]
      if {$tmp ne ""} {
	set WD $tmp
      }
    }
    pack .tOption.tCommon.fPath .tOption.tCommon.bClose
    pack .tOption.tCommon.fPath.l .tOption.tCommon.fPath.e .tOption.tCommon.fPath.b -side left
  }
  button .tOption.bbandgnu -text bandgnu -command {
    toplevel .tOption.tbandgnu
    wm title .tOption.tbandgnu bandgnu
    grab set .tOption.tbandgnu
    button .tOption.tbandgnu.bClose -text Close -command {
      destroy .tOption.tbandgnu
      grab set .tOption
    }
    frame .tOption.tbandgnu.fMode
    label .tOption.tbandgnu.fMode.l -text "Processing Method"
    radiobutton .tOption.tbandgnu.fMode.rbTcl -text "Internal" -variable bandgnuMode -value Tcl
    radiobutton .tOption.tbandgnu.fMode.rbC -text "External (requires 'bandgnu*.c')" -variable bandgnuMode -value C
    frame .tOption.tbandgnu.fPath
    label .tOption.tbandgnu.fPath.l -text "Path of 'bandgnu'"
    entry .tOption.tbandgnu.fPath.e -textvariable bandgnuPath -width 100
    button .tOption.tbandgnu.fPath.b -text Select -command {
      set tmp [tk_getOpenFile -initialdir $dir -filetypes {{{source file} {bandgnu*.c}}} -title "Select a source file of 'bandgnu'" -parent .tOption]
      if {$tmp ne ""} {
	set bandgnuPath $tmp
      }
    }
    frame .tOption.tbandgnu.fAP
    label .tOption.tbandgnu.fAP.l -text "Automatic Export"
    radiobutton .tOption.tbandgnu.fAP.rbOn -text "On" -variable bandgnuAE -value on
    radiobutton .tOption.tbandgnu.fAP.rbOff -text "Off" -variable bandgnuAE -value off
    frame .tOption.tbandgnu.fColor
    label .tOption.tbandgnu.fColor.l -text "Background Color"
    entry .tOption.tbandgnu.fColor.e -textvariable bandgnuColor -width 10
    button .tOption.tbandgnu.fColor.b -text "Select" -command {
      set tmp [tk_chooseColor -initialcolor $bandgnuColor -parent .tOption]
      if {$tmp ne ""} {
	set bandgnuColor $tmp
      }
    }
    frame .tOption.tbandgnu.fPreview
    label .tOption.tbandgnu.fPreview.l -text "Preview (for 'Internal Processing')"
    radiobutton .tOption.tbandgnu.fPreview.rbOn -text On -variable bandgnuPreview -value on
    radiobutton .tOption.tbandgnu.fPreview.rbOff -text Off -variable bandgnuPreview -value off
    frame .tOption.tbandgnu.fExport
    label .tOption.tbandgnu.fExport.l -text "Export Format"
    entry .tOption.tbandgnu.fExport.e -textvariable bandgnuExport -width 15
    button .tOption.tbandgnu.fExport.b -text Select -command {
      toplevel .tOption.tbandgnu.tExport
      wm title .tOption.tbandgnu.tExport Export
      grab set .tOption.tbandgnu.tExport
      labelframe .tOption.tbandgnu.tExport.lfExport -text "Export Format"
      listbox .tOption.tbandgnu.tExport.lfExport.lb
      .tOption.tbandgnu.tExport.lfExport.lb insert end "postscript eps" pdf png jpeg svg emf gif
      button .tOption.tbandgnu.tExport.bClose -text Close -command {
	if {[.tOption.tbandgnu.tExport.lfExport.lb curselection] ne ""} {
	  set bandgnuExport [.tOption.tbandgnu.tExport.lfExport.lb get [.tOption.tbandgnu.tExport.lfExport.lb curselection]]
	}
	destroy .tOption.tbandgnu.tExport
	grab set .tOption.tbandgnu
      }
      pack .tOption.tbandgnu.tExport.lfExport .tOption.tbandgnu.tExport.bClose
      pack .tOption.tbandgnu.tExport.lfExport.lb
    }
    frame .tOption.tbandgnu.fEnhanced
    label .tOption.tbandgnu.fEnhanced.l -text "Enhanced Expression"
    radiobutton .tOption.tbandgnu.fEnhanced.rbOn -text On -variable bandgnuEnhanced -value on
    radiobutton .tOption.tbandgnu.fEnhanced.rbOff -text Off -variable bandgnuEnhanced -value off
    pack .tOption.tbandgnu.fMode .tOption.tbandgnu.fPath .tOption.tbandgnu.fAP .tOption.tbandgnu.fColor .tOption.tbandgnu.fPreview .tOption.tbandgnu.fExport .tOption.tbandgnu.fEnhanced .tOption.tbandgnu.bClose
    pack .tOption.tbandgnu.fMode.l .tOption.tbandgnu.fMode.rbTcl .tOption.tbandgnu.fMode.rbC -side left
    pack .tOption.tbandgnu.fPath.l .tOption.tbandgnu.fPath.e .tOption.tbandgnu.fPath.b -side left
    pack .tOption.tbandgnu.fAP.l .tOption.tbandgnu.fAP.rbOn .tOption.tbandgnu.fAP.rbOff -side left
    pack .tOption.tbandgnu.fColor.l .tOption.tbandgnu.fColor.e .tOption.tbandgnu.fColor.b -side left
    pack .tOption.tbandgnu.fPreview.l .tOption.tbandgnu.fPreview.rbOn .tOption.tbandgnu.fPreview.rbOff -side left
    pack .tOption.tbandgnu.fExport.l .tOption.tbandgnu.fExport.e .tOption.tbandgnu.fExport.b -side left
    pack .tOption.tbandgnu.fEnhanced.l .tOption.tbandgnu.fEnhanced.rbOn .tOption.tbandgnu.fEnhanced.rbOff -side left
  }
  button .tOption.bReset -text Reset -command {
    file delete $rootPath/.omxtoolrc
    set yraMax 3
    set yraMin -3
    set fontSize 36
    set bandgnuPath ""
    set bandgnuMode Tcl
    set WD $rootPath
    set bandgnuAE on
    set ylabel "Energy (eV)"
    set bandgnuColor #000000
    set bandgnuPreview on
    set bandgnuExport "postscript eps"
    set bandgnuEnhanced on
    set ratio 1
    set ytics 1
    set BANDDAT1Color 1
    set BANDDAT2Color 2
    set branchColor 3
    set BANDDAT1Type 1
    set BANDDAT2Type 2
    set branchType 3
    set BANDDAT1Width 1
    set BANDDAT2Width 1
    set branchWidth 3
    set LCMode 2
    set BANDDAT1RGBColor #ff0000
    set BANDDAT2RGBColor #00ff00
    set branchRGBColor #0000ff
  }
  button .tOption.bClose -text Close -command {
    destroy .tOption
    saveSetting
  }
  frame .tOption.fRatio
  label .tOption.fRatio.l -text Ratio
  entry .tOption.fRatio.e -textvariable ratio
  frame .tOption.fYtics
  label .tOption.fYtics.l -text Ytics
  entry .tOption.fYtics.e -textvariable ytics
  if {$gnuplotVersion>=4.2} {
    frame .tOption.fLinecolor
    label .tOption.fLinecolor.l -text linecolor
    radiobutton .tOption.fLinecolor.rbOff -text Off -value 0 -variable LCMode -command {
      .tOption.lfLinecolor.fBANDDAT1Color.e configure -state disabled
      .tOption.lfLinecolor.fBANDDAT2Color.e configure -state disabled
      .tOption.lfLinecolor.fBranchColor.e configure -state disabled
      if {[winfo exists .tOption.lfLinecolor.fBANDDAT1Color.b]} {
	.tOption.lfLinecolor.fBANDDAT1Color.b configure -state disabled
      }
      if {[winfo exists .tOption.lfLinecolor.fBANDDAT2Color.b]} {
	.tOption.lfLinecolor.fBANDDAT2Color.b configure -state disabled
      }
      if {[winfo exists .tOption.lfLinecolor.fBranchColor.b]} {
	.tOption.lfLinecolor.fBranchColor.b configure -state disabled
      }
    }
    radiobutton .tOption.fLinecolor.rbOn -text On -value 1 -variable LCMode -command {
      .tOption.lfLinecolor.fBANDDAT1Color.e configure -textvariable BANDDAT1Color
      .tOption.lfLinecolor.fBANDDAT2Color.e configure -textvariable BANDDAT2Color
      .tOption.lfLinecolor.fBranchColor.e configure -textvariable branchColor
      .tOption.lfLinecolor.fBANDDAT1Color.e configure -state normal
      .tOption.lfLinecolor.fBANDDAT2Color.e configure -state normal
      .tOption.lfLinecolor.fBranchColor.e configure -state normal
      destroy .tOption.lfLinecolor.fBANDDAT1Color.b .tOption.lfLinecolor.fBANDDAT2Color.b .tOption.lfLinecolor.fBranchColor.b
    }
    radiobutton .tOption.fLinecolor.rbRGB -text RGB -value 2 -variable LCMode -command {
      .tOption.lfLinecolor.fBANDDAT1Color.e configure -textvariable BANDDAT1RGBColor
      .tOption.lfLinecolor.fBANDDAT2Color.e configure -textvariable BANDDAT2RGBColor
      .tOption.lfLinecolor.fBranchColor.e configure -textvariable branchRGBColor
      .tOption.lfLinecolor.fBANDDAT1Color.e configure -state normal
      .tOption.lfLinecolor.fBANDDAT2Color.e configure -state normal
      .tOption.lfLinecolor.fBranchColor.e configure -state normal
      if {![winfo exists .tOption.lfLinecolor.fBANDDAT1Color.b]} {
	button .tOption.lfLinecolor.fBANDDAT1Color.b -text Select -command {
	  set tmp [tk_chooseColor -initialcolor $BANDDAT1RGBColor -parent .tOption]
	  if {$tmp ne ""} {
	    set BANDDAT1RGBColor $tmp
	  }
	}
      } else {
	.tOption.lfLinecolor.fBANDDAT1Color.b configure -state normal
      }
      pack .tOption.lfLinecolor.fBANDDAT1Color.b
      if {![winfo exists .tOption.lfLinecolor.fBANDDAT2Color.b]} {
	button .tOption.lfLinecolor.fBANDDAT2Color.b -text Select -command {
	  set tmp [tk_chooseColor -initialcolor $BANDDAT2RGBColor -parent .tOption]
	  if {$tmp ne ""} {
	    set BANDDAT2RGBColor $tmp
	  }
	}
      } else {
	.tOption.lfLinecolor.fBANDDAT2Color.b configure -state normal
      }
      pack .tOption.lfLinecolor.fBANDDAT2Color.b
      if {![winfo exists .tOption.lfLinecolor.fBranchColor.b]} {
	button .tOption.lfLinecolor.fBranchColor.b -text Select -command {
	  set tmp [tk_chooseColor -initialcolor $BranchRGBColor -parent .tOption]
	  if {$tmp ne ""} {
	    set BranchRGBColor $tmp
	  }
	}
      } else {
	.tOption.lfLinecolor.fBranchColor.b configure -state normal
      }
      pack .tOption.lfLinecolor.fBranchColor.b
    }
    pack .tOption.fLinecolor.l .tOption.fLinecolor.rbOff .tOption.fLinecolor.rbOn .tOption.fLinecolor.rbRGB -side left
    labelframe .tOption.lfLinecolor -labelwidget .tOption.fLinecolor
    frame .tOption.lfLinecolor.fBANDDAT1Color
    label .tOption.lfLinecolor.fBANDDAT1Color.l -text "BANDDAT1"
    if {$LCMode==2} {
      entry .tOption.lfLinecolor.fBANDDAT1Color.e -textvariable BANDDAT1RGBColor -width 10
    } elseif {$LCMode==1} {
      entry .tOption.lfLinecolor.fBANDDAT1Color.e -textvariable BANDDAT1Color -width 10
    } else {
      entry .tOption.lfLinecolor.fBANDDAT1Color.e -width 10 -state disabled
    }
    button .tOption.lfLinecolor.fBANDDAT1Color.b -text Select -command {
      set tmp [tk_chooseColor -initialcolor $BANDDAT1RGBColor -parent .tOption]
      if {$tmp ne ""} {
	set BANDDAT1RGBColor $tmp
      }
    }
    frame .tOption.lfLinecolor.fBANDDAT2Color
    label .tOption.lfLinecolor.fBANDDAT2Color.l -text "BANDDAT2"
    if {$LCMode==2} {
      entry .tOption.lfLinecolor.fBANDDAT2Color.e -textvariable BANDDAT2RGBColor -width 10
    } elseif {$LCMode==1} {
      entry .tOption.lfLinecolor.fBANDDAT2Color.e -textvariable BANDDAT2Color -width 10
    } else {
      entry .tOption.lfLinecolor.fBANDDAT2Color.e -width 10 -state disabled
    }
    button .tOption.lfLinecolor.fBANDDAT2Color.b -text Select -command {
      set tmp [tk_chooseColor -initialcolor $BANDDAT2Color -parent .tOption]
      if {$tmp ne ""} {
	set BANDDAT2Color $tmp
      }
    }
    frame .tOption.lfLinecolor.fBranchColor
    label .tOption.lfLinecolor.fBranchColor.l -text "Branch"
    if {$LCMode==2} {
      entry .tOption.lfLinecolor.fBranchColor.e -textvariable branchRGBColor -width 10
    } elseif {$LCMode==1} {
      entry .tOption.lfLinecolor.fBranchColor.e -textvariable branchColor -width 10
    } else {
      entry .tOption.lfLinecolor.fBranchColor.e -width 10 -state disabled
    }
    button .tOption.lfLinecolor.fBranchColor.b -text Select -command {
      set tmp [tk_chooseColor -initialcolor $branchColor -parent .tOption]
      if {$tmp ne ""} {
	set branchColor $tmp
      }
    }
  }
  labelframe .tOption.lfLinetype -text "linetype"
  frame .tOption.lfLinetype.fBANDDAT1Type
  label .tOption.lfLinetype.fBANDDAT1Type.l -text "BANDDAT1"
  entry .tOption.lfLinetype.fBANDDAT1Type.e -textvariable BANDDAT1Type -width 10
  frame .tOption.lfLinetype.fBANDDAT2Type
  label .tOption.lfLinetype.fBANDDAT2Type.l -text "BANDDAT2"
  entry .tOption.lfLinetype.fBANDDAT2Type.e -textvariable BANDDAT2Type -width 10
  frame .tOption.lfLinetype.fBranchType
  label .tOption.lfLinetype.fBranchType.l -text "Branch"
  entry .tOption.lfLinetype.fBranchType.e -textvariable branchType -width 10
  labelframe .tOption.lfLinewidth -text "linewidth"
  frame .tOption.lfLinewidth.fBANDDAT1Width
  label .tOption.lfLinewidth.fBANDDAT1Width.l -text "BANDDAT1"
  entry .tOption.lfLinewidth.fBANDDAT1Width.e -textvariable BANDDAT1Width -width 10
  frame .tOption.lfLinewidth.fBANDDAT2Width
  label .tOption.lfLinewidth.fBANDDAT2Width.l -text "BANDDAT2"
  entry .tOption.lfLinewidth.fBANDDAT2Width.e -textvariable BANDDAT2Width -width 10
  frame .tOption.lfLinewidth.fBranchWidth
  label .tOption.lfLinewidth.fBranchWidth.l -text "Branch"
  entry .tOption.lfLinewidth.fBranchWidth.e -textvariable branchWidth -width 10
  if {$gnuplotVersion>=4.2} {
    pack .tOption.fYra .tOption.fYtics .tOption.fFontSize .tOption.fYlabel .tOption.fRatio .tOption.lfLinetype .tOption.lfLinewidth .tOption.lfLinecolor .tOption.bReset .tOption.bCommon .tOption.bbandgnu .tOption.bClose
  } else {
    pack .tOption.fYra .tOption.fYtics .tOption.fFontSize .tOption.fYlabel .tOption.fRatio .tOption.lfLinetype .tOption.lfLinewidth .tOption.bReset .tOption.bCommon .tOption.bbandgnu .tOption.bClose
  }
  pack .tOption.fYra.l .tOption.fYra.ll .tOption.fYra.eMin .tOption.fYra.lc .tOption.fYra.eMax .tOption.fYra.lr -side left
  pack .tOption.fFontSize.l .tOption.fFontSize.e -side left
  pack .tOption.fYlabel.l .tOption.fYlabel.e -side left
  pack .tOption.fRatio.l .tOption.fRatio.e -side left
  pack .tOption.fYtics.l .tOption.fYtics.e -side left
  if {$gnuplotVersion>=4.2} {
    pack .tOption.lfLinecolor.fBANDDAT1Color .tOption.lfLinecolor.fBANDDAT2Color .tOption.lfLinecolor.fBranchColor
    pack .tOption.lfLinecolor.fBANDDAT1Color.l .tOption.lfLinecolor.fBANDDAT1Color.e -side left
    if {$LCMode==2} {
      pack .tOption.lfLinecolor.fBANDDAT1Color.b -side left
    }
    pack .tOption.lfLinecolor.fBANDDAT2Color.l .tOption.lfLinecolor.fBANDDAT2Color.e -side left
    if {$LCMode==2} {
      pack .tOption.lfLinecolor.fBANDDAT2Color.b -side left
    }
    pack .tOption.lfLinecolor.fBranchColor.l .tOption.lfLinecolor.fBranchColor.e -side left
    if {$LCMode==2} {
      pack .tOption.lfLinecolor.fBranchColor.b -side left
    }
  }
  pack .tOption.lfLinetype.fBANDDAT1Type .tOption.lfLinetype.fBANDDAT2Type .tOption.lfLinetype.fBranchType
  pack .tOption.lfLinetype.fBANDDAT1Type.l .tOption.lfLinetype.fBANDDAT1Type.e -side left
  pack .tOption.lfLinetype.fBANDDAT2Type.l .tOption.lfLinetype.fBANDDAT2Type.e -side left
  pack .tOption.lfLinetype.fBranchType.l .tOption.lfLinetype.fBranchType.e -side left
  pack .tOption.lfLinewidth.fBANDDAT1Width .tOption.lfLinewidth.fBANDDAT2Width .tOption.lfLinewidth.fBranchWidth
  pack .tOption.lfLinewidth.fBANDDAT1Width.l .tOption.lfLinewidth.fBANDDAT1Width.e -side left
  pack .tOption.lfLinewidth.fBANDDAT2Width.l .tOption.lfLinewidth.fBANDDAT2Width.e -side left
  pack .tOption.lfLinewidth.fBranchWidth.l .tOption.lfLinewidth.fBranchWidth.e -side left
}
proc openOptionGP {} {
  global gnuplotVersion LCMode
  if {[winfo exists .tOptionGP]} {
    raise .tOptionGP
    focus .tOptionGP
    return
  }
  toplevel .tOptionGP
  wm title .tOptionGP Option
  frame .tOptionGP.fFontSize
  label .tOptionGP.fFontSize.l -text "Font Size"
  entry .tOptionGP.fFontSize.e -textvariable fontSize
  frame .tOptionGP.fYlabel
  label .tOptionGP.fYlabel.l -text Ylabel
  entry .tOptionGP.fYlabel.e -textvariable ylabel
  button .tOptionGP.bClose -text Close -command {
    destroy .tOptionGP
    saveSetting
  }
  frame .tOptionGP.fRatio
  label .tOptionGP.fRatio.l -text Ratio
  entry .tOptionGP.fRatio.e -textvariable ratio
  frame .tOptionGP.fYtics
  label .tOptionGP.fYtics.l -text Ytics
  entry .tOptionGP.fYtics.e -textvariable ytics
  if {$gnuplotVersion>=4.2} {
    frame .tOptionGP.fLinecolor
    label .tOptionGP.fLinecolor.l -text linecolor
    radiobutton .tOptionGP.fLinecolor.rbOff -text Off -value 0 -variable LCMode -command {
      .tOptionGP.lfLinecolor.fBANDDAT1Color.e configure -state disabled
      .tOptionGP.lfLinecolor.fBANDDAT2Color.e configure -state disabled
      .tOptionGP.lfLinecolor.fBranchColor.e configure -state disabled
      if {[winfo exists .tOptionGP.lfLinecolor.fBANDDAT1Color.b]} {
	.tOptionGP.lfLinecolor.fBANDDAT1Color.b configure -state disabled
      }
      if {[winfo exists .tOptionGP.lfLinecolor.fBANDDAT2Color.b]} {
	.tOptionGP.lfLinecolor.fBANDDAT2Color.b configure -state disabled
      }
      if {[winfo exists .tOptionGP.lfLinecolor.fBranchColor.b]} {
	.tOptionGP.lfLinecolor.fBranchColor.b configure -state disabled
      }
    }
    radiobutton .tOptionGP.fLinecolor.rbOn -text On -value 1 -variable LCMode -command {
      .tOptionGP.lfLinecolor.fBANDDAT1Color.e configure -textvariable BANDDAT1Color
      .tOptionGP.lfLinecolor.fBANDDAT2Color.e configure -textvariable BANDDAT2Color
      .tOptionGP.lfLinecolor.fBranchColor.e configure -textvariable branchColor
      .tOptionGP.lfLinecolor.fBANDDAT1Color.e configure -state normal
      .tOptionGP.lfLinecolor.fBANDDAT2Color.e configure -state normal
      .tOptionGP.lfLinecolor.fBranchColor.e configure -state normal
      destroy .tOptionGP.lfLinecolor.fBANDDAT1Color.b .tOptionGP.lfLinecolor.fBANDDAT2Color.b .tOptionGP.lfLinecolor.fBranchColor.b
    }
    radiobutton .tOptionGP.fLinecolor.rbRGB -text RGB -value 2 -variable LCMode -command {
      .tOptionGP.lfLinecolor.fBANDDAT1Color.e configure -textvariable BANDDAT1RGBColor
      .tOptionGP.lfLinecolor.fBANDDAT2Color.e configure -textvariable BANDDAT2RGBColor
      .tOptionGP.lfLinecolor.fBranchColor.e configure -textvariable branchRGBColor
      .tOptionGP.lfLinecolor.fBANDDAT1Color.e configure -state normal
      .tOptionGP.lfLinecolor.fBANDDAT2Color.e configure -state normal
      .tOptionGP.lfLinecolor.fBranchColor.e configure -state normal
      if {![winfo exists .tOptionGP.lfLinecolor.fBANDDAT1Color.b]} {
	button .tOptionGP.lfLinecolor.fBANDDAT1Color.b -text Select -command {
	  set tmp [tk_chooseColor -initialcolor $BANDDAT1RGBColor -parent .tOptionGP]
	  if {$tmp ne ""} {
	    set BANDDAT1RGBColor $tmp
	  }
	}
      } else {
	.tOptionGP.lfLinecolor.fBANDDAT1Color.b configure -state normal
      }
      pack .tOptionGP.lfLinecolor.fBANDDAT1Color.b
      if {![winfo exists .tOptionGP.lfLinecolor.fBANDDAT2Color.b]} {
	button .tOptionGP.lfLinecolor.fBANDDAT2Color.b -text Select -command {
	  set tmp [tk_chooseColor -initialcolor $BANDDAT2RGBColor -parent .tOptionGP]
	  if {$tmp ne ""} {
	    set BANDDAT2RGBColor $tmp
	  }
	}
      } else {
	.tOptionGP.lfLinecolor.fBANDDAT2Color.b configure -state normal
      }
      pack .tOptionGP.lfLinecolor.fBANDDAT2Color.b
      if {![winfo exists .tOptionGP.lfLinecolor.fBranchColor.b]} {
	button .tOptionGP.lfLinecolor.fBranchColor.b -text Select -command {
	  set tmp [tk_chooseColor -initialcolor $BranchRGBColor -parent .tOptionGP]
	  if {$tmp ne ""} {
	    set BranchRGBColor $tmp
	  }
	}
      } else {
	.tOptionGP.lfLinecolor.fBranchColor.b configure -state normal
      }
      pack .tOptionGP.lfLinecolor.fBranchColor.b
    }
    pack .tOptionGP.fLinecolor.l .tOptionGP.fLinecolor.rbOff .tOptionGP.fLinecolor.rbOn .tOptionGP.fLinecolor.rbRGB -side left
    labelframe .tOptionGP.lfLinecolor -labelwidget .tOptionGP.fLinecolor
    frame .tOptionGP.lfLinecolor.fBANDDAT1Color
    label .tOptionGP.lfLinecolor.fBANDDAT1Color.l -text "BANDDAT1"
    if {$LCMode==2} {
      entry .tOptionGP.lfLinecolor.fBANDDAT1Color.e -textvariable BANDDAT1RGBColor -width 10
    } elseif {$LCMode==1} {
      entry .tOptionGP.lfLinecolor.fBANDDAT1Color.e -textvariable BANDDAT1Color -width 10
    } else {
      entry .tOptionGP.lfLinecolor.fBANDDAT1Color.e -width 10 -state disabled
    }
    button .tOptionGP.lfLinecolor.fBANDDAT1Color.b -text Select -command {
      set tmp [tk_chooseColor -initialcolor $BANDDAT1RGBColor -parent .tOptionGP]
      if {$tmp ne ""} {
	set BANDDAT1RGBColor $tmp
      }
    }
    frame .tOptionGP.lfLinecolor.fBANDDAT2Color
    label .tOptionGP.lfLinecolor.fBANDDAT2Color.l -text "BANDDAT2"
    if {$LCMode==2} {
      entry .tOptionGP.lfLinecolor.fBANDDAT2Color.e -textvariable BANDDAT2RGBColor -width 10
    } elseif {$LCMode==1} {
      entry .tOptionGP.lfLinecolor.fBANDDAT2Color.e -textvariable BANDDAT2Color -width 10
    } else {
      entry .tOptionGP.lfLinecolor.fBANDDAT2Color.e -width 10 -state disabled
    }
    button .tOptionGP.lfLinecolor.fBANDDAT2Color.b -text Select -command {
      set tmp [tk_chooseColor -initialcolor $BANDDAT2Color -parent .tOptionGP]
      if {$tmp ne ""} {
	set BANDDAT2Color $tmp
      }
    }
    frame .tOptionGP.lfLinecolor.fBranchColor
    label .tOptionGP.lfLinecolor.fBranchColor.l -text "Branch"
    if {$LCMode==2} {
      entry .tOptionGP.lfLinecolor.fBranchColor.e -textvariable branchRGBColor -width 10
    } elseif {$LCMode==1} {
      entry .tOptionGP.lfLinecolor.fBranchColor.e -textvariable branchColor -width 10
    } else {
      entry .tOptionGP.lfLinecolor.fBranchColor.e -width 10 -state disabled
    }
    button .tOptionGP.lfLinecolor.fBranchColor.b -text Select -command {
      set tmp [tk_chooseColor -initialcolor $branchColor -parent .tOptionGP]
      if {$tmp ne ""} {
	set branchColor $tmp
      }
    }
  }
  labelframe .tOptionGP.lfLinetype -text "linetype"
  frame .tOptionGP.lfLinetype.fBANDDAT1Type
  label .tOptionGP.lfLinetype.fBANDDAT1Type.l -text "BANDDAT1"
  entry .tOptionGP.lfLinetype.fBANDDAT1Type.e -textvariable BANDDAT1Type -width 10
  frame .tOptionGP.lfLinetype.fBANDDAT2Type
  label .tOptionGP.lfLinetype.fBANDDAT2Type.l -text "BANDDAT2"
  entry .tOptionGP.lfLinetype.fBANDDAT2Type.e -textvariable BANDDAT2Type -width 10
  frame .tOptionGP.lfLinetype.fBranchType
  label .tOptionGP.lfLinetype.fBranchType.l -text "Branch"
  entry .tOptionGP.lfLinetype.fBranchType.e -textvariable branchType -width 10
  labelframe .tOptionGP.lfLinewidth -text "linewidth"
  frame .tOptionGP.lfLinewidth.fBANDDAT1Width
  label .tOptionGP.lfLinewidth.fBANDDAT1Width.l -text "BANDDAT1"
  entry .tOptionGP.lfLinewidth.fBANDDAT1Width.e -textvariable BANDDAT1Width -width 10
  frame .tOptionGP.lfLinewidth.fBANDDAT2Width
  label .tOptionGP.lfLinewidth.fBANDDAT2Width.l -text "BANDDAT2"
  entry .tOptionGP.lfLinewidth.fBANDDAT2Width.e -textvariable BANDDAT2Width -width 10
  frame .tOptionGP.lfLinewidth.fBranchWidth
  label .tOptionGP.lfLinewidth.fBranchWidth.l -text "Branch"
  entry .tOptionGP.lfLinewidth.fBranchWidth.e -textvariable branchWidth -width 10
  if {$gnuplotVersion>=4.2} {
    pack .tOptionGP.lfLinecolor.fBANDDAT1Color .tOptionGP.lfLinecolor.fBANDDAT2Color .tOptionGP.lfLinecolor.fBranchColor
    pack .tOptionGP.lfLinecolor.fBANDDAT1Color.l .tOptionGP.lfLinecolor.fBANDDAT1Color.e -side left
    if {$LCMode==2} {
      pack .tOptionGP.lfLinecolor.fBANDDAT1Color.b -side left
    }
    pack .tOptionGP.lfLinecolor.fBANDDAT2Color.l .tOptionGP.lfLinecolor.fBANDDAT2Color.e -side left
    if {$LCMode==2} {
      pack .tOptionGP.lfLinecolor.fBANDDAT2Color.b -side left
    }
    pack .tOptionGP.lfLinecolor.fBranchColor.l .tOptionGP.lfLinecolor.fBranchColor.e -side left
    if {$LCMode==2} {
      pack .tOptionGP.lfLinecolor.fBranchColor.b -side left
    }
  }
  pack .tOptionGP.fFontSize.l .tOptionGP.fFontSize.e -side left
  pack .tOptionGP.fYlabel.l .tOptionGP.fYlabel.e -side left
  pack .tOptionGP.fRatio.l .tOptionGP.fRatio.e -side left
  pack .tOptionGP.fYtics.l .tOptionGP.fYtics.e -side left
  pack .tOptionGP.lfLinetype.fBANDDAT1Type .tOptionGP.lfLinetype.fBANDDAT2Type .tOptionGP.lfLinetype.fBranchType
  pack .tOptionGP.lfLinetype.fBANDDAT1Type.l .tOptionGP.lfLinetype.fBANDDAT1Type.e -side left
  pack .tOptionGP.lfLinetype.fBANDDAT2Type.l .tOptionGP.lfLinetype.fBANDDAT2Type.e -side left
  pack .tOptionGP.lfLinetype.fBranchType.l .tOptionGP.lfLinetype.fBranchType.e -side left
  pack .tOptionGP.lfLinewidth.fBANDDAT1Width .tOptionGP.lfLinewidth.fBANDDAT2Width .tOptionGP.lfLinewidth.fBranchWidth
  pack .tOptionGP.lfLinewidth.fBANDDAT1Width.l .tOptionGP.lfLinewidth.fBANDDAT1Width.e -side left
  pack .tOptionGP.lfLinewidth.fBANDDAT2Width.l .tOptionGP.lfLinewidth.fBANDDAT2Width.e -side left
  pack .tOptionGP.lfLinewidth.fBranchWidth.l .tOptionGP.lfLinewidth.fBranchWidth.e -side left
  if {$gnuplotVersion>=4.2} {
    pack .tOptionGP.fYtics .tOptionGP.fFontSize .tOptionGP.fYlabel .tOptionGP.fRatio .tOptionGP.lfLinetype .tOptionGP.lfLinewidth .tOptionGP.lfLinecolor .tOptionGP.bClose
    pack .tOptionGP.lfLinecolor.fBANDDAT1Color .tOptionGP.lfLinecolor.fBANDDAT2Color .tOptionGP.lfLinecolor.fBranchColor
  } else {
    pack .tOptionGP.fYtics .tOptionGP.fFontSize .tOptionGP.fYlabel .tOptionGP.fRatio .tOptionGP.lfLinetype .tOptionGP.lfLinewidth .tOptionGP.bClose
  }
}
set openmx_tcl [file normalize $argv0]
set rootPath [file dirname $openmx_tcl]
set nwin 0
set gp ""
set yraMax 3
set yraMin -3
set fontSize 36
set bandgnuPath ""
set bandgnuMode Tcl
set ylabel "Energy (eV)"
set WD $rootPath
set bandgnuAE on
set bandgnuColor #000000
set bandgnuPreview on
set bandgnuExport "postscript eps"
set bandgnuEnhanced on
set ratio 1
set ytics 1
set BANDDAT1Color #ff0000
set BANDDAT2Color #00ff00
set branchColor #0000ff
set BANDDAT1Type 1
set BANDDAT2Type 2
set branchType 3
if [file exists $rootPath/.omxtoolrc] {
  source $rootPath/.omxtoolrc
} else {
  saveSetting
}
set dir $WD
wm protocol . WM_DELETE_WINDOW {exit}
if {[info exists env(HOSTNAME)]} {
  set HOSTNAME $env(HOSTNAME)
} else {
  set HOSTNAME localhost
}
wm title . "OMXTool@$HOSTNAME"
label .l0 -textvariable buff
label .l1 -textvariable buff1 -justify left
button .bband -text Band -command band
button .bOption -text Option -command openOption
button .bexit -text Exit -command exit
if {[info patchlevel]>=8.5} {
  button .bbin2bin -text bin2bin -command b2b
  pack .l0 .l1 .bband .bbin2bin .bOption .bexit -expand 1 -fill both
} else {
  pack .l0 .l1 .bband .bOption .bexit -expand 1 -fill both
}
set gnuplotInfo [exec gnuplot --version]
set gnuplotVersion [lindex $gnuplotInfo 1]
set gnuplotPatchlevel [lindex $gnuplotInfo 3]
while 1 {
  set buff [status]
  set buff1 [status1]
  .l0 configure -textvariable buff
  .l1 configure -textvariable buff1
  update
  after 100
}
